The Purpose of this Exercise: Modularizing a Node.js Project with TypeScript
How to Use TypeScript with Node.js


##1-npm init -y

##2-npm install typescript --save-dev

##3-npm install @types/node --save-dev

##4-create tscconfig
npx tsc --init --rootDir src --outDir build \
--esModuleInterop --resolveJsonModule --lib es6 \
--module commonjs --allowJs true --noImplicitAny true


rootDir: This is where TypeScript looks for our code. We've configured it to look in the src/ folder. That's where we'll write our TypeScript.
outDir: Where TypeScript puts our compiled code. We want it to go to a build/ folder.


##5-mkdir src
touch src/index.ts



##6-npx tsc

Our compiled code


Check out build/index.js


Cold reloading
Cold reloading is nice for local development. In order to do this, 
we'll need to rely on a couple more packages: ts-node for running
 TypeScript code directly without having to wait for it be compiled, 
 and nodemon, to watch for 
changes to our code and automatically restart when a file is changed.


##7-npm install --save-dev ts-node nodemon

##8-Add a nodemon.json config.

{
  "watch": ["src"],
  "ext": ".ts,.js",
  "ignore": [],
  "exec": "npx ts-node ./src/index.ts"
}


"start:dev": "npx nodemon",




##9-Creating production builds

npm install --save-dev rimraf

And then, add this to your package.json.
"build": "rimraf ./build && tsc",



Production startup script
In order to start the app in production, all we need to do is run 
the build command first, and then execute the compiled JavaScript at build/index.js.

The startup script looks like this.
"start": "npm run build && node build/index.js"
